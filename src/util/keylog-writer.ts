import * as fs from 'fs/promises';
import * as path from 'path';
import { TlsKeylogEvent } from '../types';

/**
 * Utility class for writing TLS keylog data to files in NSS Key Log format.
 * This format is compatible with tools like Wireshark for TLS traffic decryption.
 */
export class KeylogWriter {
    private fileHandles: Map<string, fs.FileHandle> = new Map();
    private writeQueues: Map<string, Promise<void>> = new Map();

    /**
     * Write a keylog event to the appropriate file based on connection type.
     * @param event The TLS keylog event to write
     * @param incomingKeylogFile Path to file for incoming connection keylogs
     * @param upstreamKeylogFile Path to file for upstream connection keylogs
     */
    async writeKeylogEvent(
        event: TlsKeylogEvent,
        incomingKeylogFile?: string,
        upstreamKeylogFile?: string
    ): Promise<void> {
        const targetFile = event.connectionType === 'incoming' 
            ? incomingKeylogFile 
            : upstreamKeylogFile;

        if (!targetFile) {
            return; // No file configured for this connection type
        }

        // Ensure the directory exists
        await this.ensureDirectoryExists(targetFile);

        // Queue the write operation to prevent race conditions
        const currentQueue = this.writeQueues.get(targetFile) || Promise.resolve();
        const writePromise = currentQueue.then(() => this.writeToFile(targetFile, event));
        this.writeQueues.set(targetFile, writePromise);

        return writePromise;
    }

    /**
     * Write keylog data to a specific file.
     * @param filePath Path to the keylog file
     * @param event The TLS keylog event to write
     */
    private async writeToFile(filePath: string, event: TlsKeylogEvent): Promise<void> {
        try {
            let fileHandle = this.fileHandles.get(filePath);
            
            if (!fileHandle) {
                // Open file in append mode, create if it doesn't exist
                fileHandle = await fs.open(filePath, 'a');
                this.fileHandles.set(filePath, fileHandle);
            }

            // Format the keylog line with timestamp comment if it's the first line in the file
            const stats = await fileHandle.stat();
            let content = '';
            
            if (stats.size === 0) {
                // Add header comment for new files
                content += `# TLS Key Log File generated by Mockttp\n`;
                content += `# Format: NSS Key Log Format\n`;
                content += `# Connection Type: ${event.connectionType}\n`;
                content += `# Generated: ${new Date().toISOString()}\n`;
                content += `\n`;
            }

            // Add the keylog line (already in NSS format)
            content += `${event.keylogLine}\n`;

            await fileHandle.write(content);
            await fileHandle.sync(); // Ensure data is written to disk
        } catch (error) {
            console.error(`Failed to write keylog to ${filePath}:`, error);
            throw error;
        }
    }

    /**
     * Ensure the directory for the given file path exists.
     * @param filePath The file path to check
     */
    private async ensureDirectoryExists(filePath: string): Promise<void> {
        const directory = path.dirname(filePath);
        try {
            await fs.access(directory);
        } catch {
            // Directory doesn't exist, create it
            await fs.mkdir(directory, { recursive: true });
        }
    }

    /**
     * Close all open file handles and clean up resources.
     */
    async close(): Promise<void> {
        // Wait for all pending writes to complete
        await Promise.all(this.writeQueues.values());
        
        // Close all file handles
        const closePromises = Array.from(this.fileHandles.values()).map(handle => 
            handle.close().catch(error => {
                console.error('Error closing keylog file handle:', error);
            })
        );
        
        await Promise.all(closePromises);
        
        // Clear the maps
        this.fileHandles.clear();
        this.writeQueues.clear();
    }

    /**
     * Flush all pending writes and sync file handles.
     */
    async flush(): Promise<void> {
        // Wait for all pending writes to complete
        await Promise.all(this.writeQueues.values());
        
        // Sync all file handles
        const syncPromises = Array.from(this.fileHandles.values()).map(handle => 
            handle.sync().catch(error => {
                console.error('Error syncing keylog file handle:', error);
            })
        );
        
        await Promise.all(syncPromises);
    }
}

/**
 * Global keylog writer instance for the server.
 */
export const globalKeylogWriter = new KeylogWriter();